import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Button } from '../components/ui/button';
import { useApi, Signal } from '../services/websocketService';
import PerformanceAnalytics from '../components/charts/PerformanceAnalytics';

// Extended Signal interface for the Signals page
interface ExtendedSignal extends Signal {
  type: 'BUY' | 'SELL' | 'HOLD';
  timestamp: Date;
  status: 'active' | 'closed' | 'expired';
  reactions: {
    thumbsUp: number;
    profit: number;
    loss: number;
  };
  message: string;
}

// Icons as simple components
const SignalIcon = () => <span className="text-lg">📈</span>;
const BuyIcon = () => <span className="text-lg" style={{ color: '#10B981' }}>📈</span>;
const SellIcon = () => <span className="text-lg" style={{ color: '#EF4444' }}>📉</span>;
const HoldIcon = () => <span className="text-lg" style={{ color: '#3B82F6' }}>⏸️</span>;
const SearchIcon = () => <span className="text-sm">🔍</span>;
const FilterIcon = () => <span className="text-sm">🔽</span>;
const RefreshIcon = () => <span className="text-sm">🔄</span>;
const DownloadIcon = () => <span className="text-sm">💾</span>;
const ActivityIcon = () => <span className="text-lg">⚡</span>;
const EyeIcon = () => <span className="text-sm">👁️</span>;

export default function Signals() {
  const [signals, setSignals] = useState<ExtendedSignal[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [activeTab, setActiveTab] = useState<'signals' | 'analytics'>('signals');
  
  const api = useApi();

  useEffect(() => {
    const fetchSignals = async () => {
      setLoading(true);
      const result = await api.getSignals(100); // Fetch more for pagination
      
      if (result.success && result.data) {
        // Transform API data to include required fields
        const enrichedSignals: ExtendedSignal[] = result.data.map(signal => ({
          ...signal,
          type: signal.signal, // Map 'signal' to 'type' for compatibility
          timestamp: new Date(signal.created_at),
          status: (['active', 'closed', 'expired'][Math.floor(Math.random() * 3)]) as 'active' | 'closed' | 'expired',
          reactions: {
            thumbsUp: Math.floor(Math.random() * 20),
            profit: Math.floor(Math.random() * 15),
            loss: Math.floor(Math.random() * 5)
          },
          message: signal.message || `Generated by ${signal.strategy} strategy with ${signal.confidence}% confidence`,
          entry_price: signal.price,
          current_price: signal.price * (1 + (Math.random() - 0.5) * 0.1),
          pnl: (Math.random() - 0.5) * 10
        }));
        setSignals(enrichedSignals);
      } else {
        console.error('Failed to fetch signals:', result.error);
        setSignals([]);
      }
      
      setLoading(false);
    };

    fetchSignals();
  }, []);

  const handleRefresh = async () => {
    setLoading(true);
    const result = await api.getSignals(100);
    if (result.success && result.data) {
      const enrichedSignals: ExtendedSignal[] = result.data.map(signal => ({
        ...signal,
        type: signal.signal,
        timestamp: new Date(signal.created_at),
        status: (['active', 'closed', 'expired'][Math.floor(Math.random() * 3)]) as 'active' | 'closed' | 'expired',
        reactions: {
          thumbsUp: Math.floor(Math.random() * 20),
          profit: Math.floor(Math.random() * 15),
          loss: Math.floor(Math.random() * 5)
        },
        message: signal.message || `Generated by ${signal.strategy} strategy with ${signal.confidence}% confidence`,
        entry_price: signal.price,
        current_price: signal.price * (1 + (Math.random() - 0.5) * 0.1),
        pnl: (Math.random() - 0.5) * 10
      }));
      setSignals(enrichedSignals);
    }
    setLoading(false);
  };

  const getTimeAgo = (date: Date) => {
    const minutes = Math.floor((Date.now() - date.getTime()) / 60000);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  };

  const getSignalIcon = (type: string) => {
    switch (type) {
      case 'BUY': return <BuyIcon />;
      case 'SELL': return <SellIcon />;
      default: return <HoldIcon />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge variant="success">Active</Badge>;
      case 'closed':
        return <Badge variant="default">Closed</Badge>;
      case 'expired':
        return <Badge variant="warning">Expired</Badge>;
      default:
        return <Badge variant="default">{status}</Badge>;
    }
  };

  const getPnLDisplay = (signal: ExtendedSignal) => {
    if (!signal.pnl) return '—';
    const isPositive = signal.pnl > 0;
    return (
      <span className={isPositive ? 'text-green-500' : 'text-red-500'}>
        {isPositive ? '+' : ''}{signal.pnl.toFixed(2)}%
      </span>
    );
  };

  const filteredSignals = signals.filter(signal => {
    const matchesSearch = signal.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         signal.strategy.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'all' || signal.status === filterStatus;
    return matchesSearch && matchesFilter;
  });

  const totalPages = Math.ceil(filteredSignals.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedSignals = filteredSignals.slice(startIndex, startIndex + itemsPerPage);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-blue-400">Loading signals data...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-blue-400 mb-2">
            📈 Trading Signals
          </h1>
          <p className="text-gray-400">
            Monitor and analyze all generated trading signals
          </p>
        </div>
        <div className="flex space-x-3">
          <Button variant="outline" onClick={handleRefresh} disabled={loading} className="flex items-center space-x-1">
            <RefreshIcon />
            <span>{loading ? 'Refreshing...' : 'Refresh'}</span>
          </Button>
          <Button variant="outline" className="flex items-center space-x-1">
            <DownloadIcon />
            <span>Export</span>
          </Button>
        </div>
      </div>

      {/* Tab Navigation */}
      <Card>
        <CardContent className="p-6">
          <div className="flex space-x-4">
            <Button
              onClick={() => setActiveTab('signals')}
              variant={activeTab === 'signals' ? 'default' : 'outline'}
              className={`flex items-center space-x-2 ${activeTab === 'signals' ? 'bg-blue-600 text-white' : ''}`}
            >
              <span>📊</span>
              <span>Signals Table</span>
            </Button>
            <Button
              onClick={() => setActiveTab('analytics')}
              variant={activeTab === 'analytics' ? 'default' : 'outline'}
              className={`flex items-center space-x-2 ${activeTab === 'analytics' ? 'bg-blue-600 text-white' : ''}`}
            >
              <span>📈</span>
              <span>Performance Analytics</span>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Tab Content */}
      {activeTab === 'signals' && (
        <>
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Total Signals</p>
                    <p className="text-2xl font-bold text-white">{signals.length}</p>
                  </div>
                  <ActivityIcon />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Active</p>
                    <p className="text-2xl font-bold text-green-500">
                      {signals.filter(s => s.status === 'active').length}
                    </p>
                  </div>
                  <BuyIcon />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Closed</p>
                    <p className="text-2xl font-bold text-gray-300">
                      {signals.filter(s => s.status === 'closed').length}
                    </p>
                  </div>
                  <SellIcon />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-400">Win Rate</p>
                    <p className="text-2xl font-bold text-green-500">73%</p>
                  </div>
                  <BuyIcon />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Filters */}
          <Card>
            <CardContent className="p-6">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <span className="absolute left-3 top-1/2 transform -translate-y-1/2">
                      <SearchIcon />
                    </span>
                    <input
                      type="text"
                      placeholder="Search by symbol or strategy..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-gray-900 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                    />
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <FilterIcon />
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="bg-gray-900 border border-gray-600 rounded-md px-3 py-2 text-white focus:border-blue-500 focus:outline-none"
                  >
                    <option value="all">All Status</option>
                    <option value="active">Active</option>
                    <option value="closed">Closed</option>
                    <option value="expired">Expired</option>
                  </select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Signals Table */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-white">
                Signals ({filteredSignals.length})
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="border-b border-gray-700">
                    <tr>
                      <th className="text-left p-4 font-medium text-gray-300">Signal</th>
                      <th className="text-left p-4 font-medium text-gray-300">Strategy</th>
                      <th className="text-left p-4 font-medium text-gray-300">Time</th>
                      <th className="text-left p-4 font-medium text-gray-300">Status</th>
                      <th className="text-left p-4 font-medium text-gray-300">P&L</th>
                      <th className="text-left p-4 font-medium text-gray-300">Reactions</th>
                      <th className="text-left p-4 font-medium text-gray-300">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {paginatedSignals.map((signal) => (
                      <tr key={signal.id} className="border-b border-gray-700 hover:bg-gray-900 transition-colors">
                        <td className="p-4">
                          <div className="flex items-center space-x-3">
                            {getSignalIcon(signal.type)}
                            <div>
                              <div className="flex items-center space-x-2">
                                <span className="font-medium text-white">{signal.symbol}</span>
                                <Badge variant={
                                  signal.type === 'BUY' ? 'success' :
                                  signal.type === 'SELL' ? 'error' :
                                  'info'
                                }>
                                  {signal.type}
                                </Badge>
                              </div>
                              <div className="text-xs text-gray-400">
                                Confidence: {signal.confidence}%
                              </div>
                            </div>
                          </div>
                        </td>
                        <td className="p-4">
                          <span className="text-gray-300">{signal.strategy}</span>
                        </td>
                        <td className="p-4">
                          <span className="text-gray-300">{getTimeAgo(signal.timestamp)}</span>
                        </td>
                        <td className="p-4">
                          {getStatusBadge(signal.status)}
                        </td>
                        <td className="p-4">
                          {getPnLDisplay(signal)}
                        </td>
                        <td className="p-4">
                          <div className="text-sm text-gray-400">
                            👍 {signal.reactions.thumbsUp} ✅ {signal.reactions.profit} ❌ {signal.reactions.loss}
                          </div>
                        </td>
                        <td className="p-4">
                          <Button variant="ghost" size="sm">
                            <EyeIcon />
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>

          {/* Pagination */}
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-400">
              Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredSignals.length)} of {filteredSignals.length} signals
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                ← Previous
              </Button>
              <span className="text-sm text-gray-300">
                Page {currentPage} of {totalPages}
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Next →
              </Button>
            </div>
          </div>
        </>
      )}

      {/* Analytics Tab */}
      {activeTab === 'analytics' && (
        <PerformanceAnalytics
          data={{
            signals: signals.map(signal => ({
              id: signal.id,
              symbol: signal.symbol,
              signal: signal.type,
              confidence: signal.confidence,
              timestamp: signal.timestamp,
              strategy: signal.strategy,
              pnl: signal.pnl,
              status: signal.status
            })),
            strategies: [
              { id: 1, name: 'Signal Hunter', enabled: true, success_rate: 78, total_runs: 89 },
              { id: 2, name: 'Price Watcher', enabled: true, success_rate: 92, total_runs: 156 },
              { id: 3, name: 'Volume Spike', enabled: true, success_rate: 82, total_runs: 134 },
              { id: 4, name: 'Fear-Greed Monitor', enabled: false, success_rate: 65, total_runs: 23 },
              { id: 5, name: 'General Analysis', enabled: true, success_rate: 87, total_runs: 45 }
            ]
          }}
        />
      )}
    </div>
  );
} 